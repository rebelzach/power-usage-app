@using AntDesign.Charts
@using PowerUsage.Core.Values;
@using PowerUsage.Infrastrucure;
@using PowerUsage.Web.Models;

@attribute [RenderModeServer]

@inject MeterReadingRepositoryInMemory MeterReadingRepository

<EditForm Model="_meterReading" OnSubmit="SubmitAsync">
    <InputDate Type="InputDateType.Time" @bind-Value="_meterReading.Time" DisplayName="Time" />
    <InputDate Type="InputDateType.Date" @bind-Value="_meterReading.Date" DisplayName="Date" />
    <Microsoft.AspNetCore.Components.Forms.InputNumber @bind-Value="_meterReading.TotalKilowattHours" />
</EditForm>

<AntDesign.Charts.Line @ref=_chart Config="_chartConfig"/>

<h2>Raw Readings</h2>
@foreach (var reading in _readings)
{
    <div>
        @reading.Timestamp.ToString("O"): @reading.TotalKilowattHours.Value
    </div>
}

@code {
    AntDesign.Charts.Line _chart = null!;
    MeterReadingInputModel _meterReading = new();

    IEnumerable<MeterReading> _readings = Enumerable.Empty<MeterReading>();
    object[] _chartData = Array.Empty<object>();

    LineConfig _chartConfig = new LineConfig
    {
        // Til
        // Title = new Title
        // {
        //     Visible = true,
        //     Text = "Reading"
        // },
        // Description = new Description
        // {
        //     Visible = true,
        //     Text = ""
        // },
        Padding = "auto",
        Name = "Readings",
        // ForceFit = true,
        XField = "date",
        YField = "totalKwh",
        Smooth = true
    };

    protected override async Task OnInitializedAsync()
    {
        await UpdateReadingsAsync();
    }

    async Task UpdateReadingsAsync()
    {
        _readings = await MeterReadingRepository.GetAllAsync();
        if (!_readings.Any())
        {
            return;
        }

        var firstTime = _readings.MinBy(r => r.Timestamp)?.Timestamp
            ?? throw new("No min");

        _chartData = _readings
            .Select(r => new 
            { 
                date = (r.Timestamp - firstTime).TotalSeconds, 
                totalKwh = r.TotalKilowattHours.Value 
            })
            .ToArray();
        await _chart.UpdateChart(csData: _chartData);

        StateHasChanged();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return Task.CompletedTask;
    }

    async Task SubmitAsync()
    {
        if (_meterReading is not { Date: not null, Time: not null, TotalKilowattHours: not null })
        {
            throw new NullReferenceException("Date, time and reading must have a value");
        }

        var dateTime = _meterReading.Date.Value.ToDateTime(_meterReading.Time.Value);
        await MeterReadingRepository.SaveAsync(
            new MeterReading(dateTime, new TotalKilowattHours(_meterReading.TotalKilowattHours.Value)));

        var now = DateTime.Now;
        _meterReading.Date = DateOnly.FromDateTime(now);
        _meterReading.Time = TimeOnly.FromDateTime(now);

        await UpdateReadingsAsync();
    }
}
